from __future__ import division
from fcntl import ioctl
import RPi.GPIO as GPIO
import pigpio
import time
import os, struct, array
import paho.mqtt.client as mqtt #
import Adafruit_PCA9685
from video import capture_video
import subprocess



GPIO.setmode(GPIO.BCM)
GPIO.setup(7,GPIO.OUT, initial=GPIO.HIGH)
GPIO.setup(22, GPIO.OUT)

pwm = Adafruit_PCA9685.PCA9685(address=0x41)

broker = '127.0.0.1' #
stakeholder = 1 #


# servo minimum pulse 150 (out of 4096)
# servo maximum pulse 600 (out of 4096)

payload = 0 # It could cause an Error: referenced before assignment
drive_mode = 0 # Here is okay. Because of the global keyword

# The duration of the pulse determines how long the motor moves, while the frequency of the pulses determinees the speed of the motor.

def set_servo_pulse(channel, pulse):
    pulse_length = 1000000
    pulse_length /= 50 # 50 Hz
    # print('{0}us per period'.format(pulse_length))
    pulse_length /= 4096 # 12 bits of resolution
    # print('{0}us per bit'.format(pulse_length))
    pulse *= 1000
    # print(pulse_length)
    pulse /= pulse_length
    # print(pulse)
    pulse = round(pulse)
    # print(pulse)
    pulse = int(pulse)
    #print ("pulse",pulse)
    pwm.set_pwm(channel, 0, pulse)


# Frequency set to 50Hz
pwm.set_pwm_freq(50)

#joystick_payloads = []

def on_message(client, userdata, message): #
    #start_time = time.time()
    # Get the values of the Gamepad and save it in payload
    #try:
    payload = float(message.payload)
        #joystick_payloads.append(payload)
    print("Received payload : ", payload)
        #print("List of payload values:", joystick_payloads)
   # except ValueError:
       #print("Error parsing payload:", message.payload)
    
    # This variable has to be global. It can be accessed and modified from enywhere within the program.
    global drive_mode
    
    # print(str(message.payload.decode("utf-8")))

    # Boom or left drive
    if(message.topic == "gamepad/linkerstick_y"): #
        
        # Boom
        # Button 'LB' is not being held pressed anymore
        if(drive_mode == 0):
            
            if (payload) >= 0.77:
                calc_servo = payload/4.6 +1.58465
                #print("the payload and the calc for the up movement : ", payload , calc_servo)
            elif (payload) <= -0.2:
                calc_servo = payload/5+1.58465
           #     print("the payload and the calc for the down movement : ", payload , calc_servo)

            else :
                calc_servo = 1.58465
         #       print("payload and cal value when not moving:", payload,calc_servo )
            
            # The left joystick was pressed
            #calc_servo=payload*0.2+1.5855
            #print("payload:", payload)
            #print("value of the calc for boom: ", calc_servo )
            
            # Upward/downward movement of the boom
            # Channel 0
            set_servo_pulse(0,calc_servo) # Values of pulse between 430 and 219 (approximately). Out of 4096.
            
            
            # Adjastment of the sensitivity of the Boom's reaction
            if(payload < 0.2 and payload > -0.2):
                GPIO.output(22, GPIO.LOW)
                #print("Hydraulik aus")
            else:
                GPIO.output(22, GPIO.HIGH)
                #print("Hydraulik ein")
        
        # left drive
        # Button 'LB' is being held pressed
        if(drive_mode == 1):
            
            # The left joystick was pressed
            calc_servo=payload*0.2+1.4

            
            # The left drive moves <-- back or forward -->
            # Chanel 4
            set_servo_pulse(4,calc_servo) # Values of pulse between 392 and 181 (approximately). Out of 4096.
            
    # Arm or right drive     
    if(message.topic == "gamepad/rechterstick_y"):
        
        # Arm
        # Button 'LB' is not being held pressed anymore
        if(drive_mode == 0):
            
            if (payload) >= 0.2:
                calc_servo = payload/5 +1.36
            elif (payload) <= -0.2:
                calc_servo = payload/5+1.36

            else :
                calc_servo = 1.36           
            # The right joystick was pressed
           # calc_servo=payload*0.3+1.36 # Values of calc_servo between 1,87 and 0,84 (approximately). Values of payload between -1,0 and 1,0.-->0.5145+1.36 
            
            # Upward/downward movement of the arm
            # Channel 1
            set_servo_pulse(1,calc_servo) # Values of pulse between 383 and 173 (approximately). Out of 4096.
            
            # Adjastment of the sensitivity of the Arm's reaction
            if(payload < 0.2 and payload > -0.2):
                GPIO.output(22, GPIO.LOW)
                # print("Hydraulik aus")
            else:
                GPIO.output(22, GPIO.HIGH)
                # print("Hydraulik ein")
        
        # right drive
        # Button 'LB' is being held pressed    
        if(drive_mode == 1):
            
            # The right joystick was pressed
            calc_servo=(-1)*payload*0.52+1.4 # Values of calc_servo between 1,9 and 0,89 (approximately). Values of payload between -1,0 and 1,0.-->0.5145+1.4
            
            # The rigt drive moves <-- back or forward -->
            # Chanel 5
            set_servo_pulse(5,calc_servo) # Values of pulse between 392 and 181 (approximately). Out of 4096.
            
    # Bucket --> Downward movement       
    if(message.topic == "gamepad/LT"):
        
        # The button 'LT' was pressed
        calc_servo=payload*0.1+1.6 # Values of calc_servo between 1.6 and 2,11 (approximately). Values of payload between 0,0 and 1,0.-->0.5145+1.6
        
        # The pump closes the bucket (upward movement)
        # Channel 2
        set_servo_pulse(2,calc_servo) # Values of pulse between 327 and 433 (approximately). Out of 4096.
        
        # Adjastment of the sensitivity of the bucket's reaction
        if(payload < 0.2):
            GPIO.output(22, GPIO.LOW)
            # print("Hydraulik aus")
        else:
            GPIO.output(22, GPIO.HIGH)
            # print("Hydraulik ein")
    
    # Bucket --> Upward movement
    if(message.topic == "gamepad/RT"):       
        
        # The button 'RT' was pressed
        calc_servo=(-1)*payload*0.22+1.6 # Values of calc_servo between 1,6 and 1,08 (approximately). Values of payload between 0,0 and 1,0-->0.5145+1.6
        
        # The pump opens the bucket (upward movement)
        # Channel 2
        set_servo_pulse(2,calc_servo) # Values of pulse between 327 and 222 (approximately). Out of 4096.
        
        
        # Adjastment of the sensitivity of the bucket's reaction
        if(payload < 0.2):
            
            GPIO.output(22, GPIO.LOW)
            # print("Hydraulik aus")
        else:
            GPIO.output(22, GPIO.HIGH)
            # print("Hydraulik ein")
    
    # Swing --> Horizontal movement
    if(message.topic == "gamepad/linkerstick_x"):
        
        #print("recieving payload : ", payload)
        
        if (payload) >= 0.2:
            calc_servo = payload/5 + 1.4
          #  print("cal vaue left side:", calc_servo)
        elif (payload) <= -0.2:
            calc_servo = payload/5 + 1.4
            #print("cal vaue left side:", calc_servo)
        else:
            calc_servo = 1.4

        set_servo_pulse(6,calc_servo) # Values of pulse between 392 and 181 (approximately). Out of 4096.
        
    
    # Activation/deactivation of the left/rigth drive
    if(message.topic == "gamepad/LB"):
        
        # Button 'LB' was pressed or is being held pressed
        if(payload == 1):
            drive_mode = 1
            
        # Button 'LB' was released    
        if(payload == 0):
            drive_mode = 0
            
            # turn off the right drive
            # channel 5
            set_servo_pulse(5,0)
            # turn off the left drive
            # channel 4
            set_servo_pulse(4,0)
            
    # 4G  
    if(message.topic == "gamepad/b"):
        
        # Button 'b' was pressed --> 4G
       # camera_process = subprocess.Popen(["python" , "video4.py"])

        
        if(payload == 1):
            # This lines still need to be coded. 
            # The green LED turns on
            # The red LED turns off when it was on. 
            pass
        
    # 5G
    if(message.topic == "gamepad/x"):
        
        # Button 'x' was pressed --> 5G 
        
        if (payload == 1):
            # This lines still need to be coded.
            # The red LED turns on
            # The green LED turns off when it was on
            pass
        
    # video streaming
    if(message.topic == "gamepad/a"):
        
        # Button 'a' was pressed --> video
        
        if (payload == 1):
            
            scamera_process = subprocess.Popen(["python" , "video.py"])

            # This lines still need to be coded.
            # The red LED turns on
            # The green LED turns off when it was on
            pass
        
    # Reboot excavator
    #                                                                                                                                                                                                                                if(message.topic == "gamepad/a"):
        
        # Button 'a' was pressed
        # Reboot the raspi excavator
        #os.system("sudo reboot")
   #end_time = time.time()
   # payload_time = end_time - start_time
    #print("referashse time :", payload_time)
   


client = mqtt.Client()#
client.on_message=on_message#
client.connect(broker, 1883, 60)#
client.loop_start()#
client.subscribe("gamepad/LB")#
# Button 'BACK' is not being used. 
# client.subscribe("gamepad/BACK")
client.subscribe("gamepad/linkerstick_y")#
client.subscribe("gamepad/LT")#
client.subscribe("gamepad/rechterstick_y")#
client.subscribe("gamepad/RT")#
client.subscribe("gamepad/linkerstick_x")#

client.subscribe("gamepad/b") # Listening for 4G#
client.subscribe("gamepad/x") # Listening for 5G#
client.subscribe("gamepad/a") # Reboot excavator#

print("Program ready and listening...")
while(True):
    stakeholder=1



                           


