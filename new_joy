import os, struct, array

# Iterate over the joystick devices.
print('Available devices:')

for fn in os.listdir('/dev/input'):
    if fn.startswith('js'):
        print('  /dev/input/%s' % (fn))

# We'll store the states here.
axis_states = {}

# These constants were borrowed from linux/input.h
axis_names = {
    0x00: 'x',
    0x01: 'y',
    # Add other axis mappings as needed
}

axis_map = []

# Open the joystick device.
fn = '/dev/input/js0'
print('Opening %s...' % fn)
jsdev = open(fn, 'rb')

# Get the device name.
buf = array.array('B', [0] * 64)
jsdev_name = os.path.basename(fn)
print('Device name: %s' % jsdev_name)

# Get number of axes.
buf = array.array('B', [0])
ioctl(jsdev, 0x80016a11, buf)  # JSIOCGAXES
num_axes = buf[0]

# Get the axis map.
buf = array.array('B', [0] * 0x40)
ioctl(jsdev, 0x80406a32, buf)  # JSIOCGAXMAP

for axis in buf[:num_axes]:
    axis_name = axis_names.get(axis, 'unknown(0x%02x)' % axis)
    axis_map.append(axis_name)
    axis_states[axis_name] = 0.0

print('%d axes found: %s' % (num_axes, ', '.join(axis_map)))

# Main event loop
while True:
    evbuf = jsdev.read(8)

    if evbuf:
        _, value, type, number = struct.unpack('IhBB', evbuf)
        if type & 0x02:  # Only check for joystick axis events
            axis = axis_map[number]
            if axis:
                fvalue = value / 32767.0
                axis_states[axis] = fvalue

                # Print the values of the left joystick axes (X and Y)
                if number == 0 or number == 1:  # Assuming 0 is X-axis and 1 is Y-axis
                    print("%s: %.3f" % (axis, fvalue))
