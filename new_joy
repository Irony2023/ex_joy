from __future__ import division
from fcntl import ioctl
import RPi.GPIO as GPIO
import pigpio
import time
import os, struct, array
import paho.mqtt.client as mqtt #
import Adafruit_PCA9685
from video import capture_video
import subprocess


GPIO.setmode(GPIO.BCM)
GPIO.setup(7,GPIO.OUT, initial=GPIO.HIGH)
GPIO.setup(22, GPIO.OUT)

pwm = Adafruit_PCA9685.PCA9685(address=0x41)


def set_servo_pulse(channel, pulse):
    pulse_length = 1000000
    pulse_length /= 50 # 50 Hz
    # print('{0}us per period'.format(pulse_length))
    pulse_length /= 4096 # 12 bits of resolution
    # print('{0}us per bit'.format(pulse_length))
    pulse *= 1000
    # print(pulse_length)
    pulse /= pulse_length
    # print(pulse)
    pulse = round(pulse)
    # print(pulse)
    pulse = int(pulse)
    #print ("pulse",pulse)
    pwm.set_pwm(channel, 0, pulse)



# Frequency set to 50Hz
pwm.set_pwm_freq(50)

fvalue = 0
drive_mode = 0

delay_flag = False # 5G is always enable


# Iterate over the joystick devices.
print('Available devices:')

for fn in os.listdir('/dev/input'):
    if fn.startswith('js'):
        print('  /dev/input/%s' % (fn))

# We'll store the states here.
axis_states = {}
button_states = {}

# These constants were borrowed from linux/input.h
axis_names = {
    0x00 : 'x',
    0x01 : 'y',
    0x02 : 'z',
    0x03 : 'rx',
    0x04 : 'ry',
    0x05 : 'rz',
    0x06 : 'throttle',
    0x07 : 'rudder',
    0x08 : 'wheel',
    0x09 : 'gas',
    0x0a : 'brake',
    0x10 : 'hat0x',
    0x11 : 'hat0y',
    0x12 : 'hat1x',
    0x13 : 'hat1y',
    0x14 : 'hat2x',
    0x15 : 'hat2y',
    0x16 : 'hat3x',
    0x17 : 'hat3y',
    0x18 : 'pressure',
    0x19 : 'distance',
    0x1a : 'tilt_x',
    0x1b : 'tilt_y',
    0x1c : 'tool_width',
    0x20 : 'volume',
    0x28 : 'misc',
}

button_names = {
    0x120 : 'trigger',
    0x121 : 'thumb',
    0x122 : 'thumb2',
    0x123 : 'top',
    0x124 : 'top2',
    0x125 : 'pinkie',
    0x126 : 'base',
    0x127 : 'base2',
    0x128 : 'base3',
    0x129 : 'base4',
    0x12a : 'base5',
    0x12b : 'base6',
    0x12f : 'dead',
    0x130 : 'a',
    0x131 : 'b',
    0x132 : 'c',
    0x133 : 'x',
    0x134 : 'y',
    0x135 : 'z',
    0x136 : 'tl',
    0x137 : 'tr',
    0x138 : 'tl2',
    0x139 : 'tr2',
    0x13a : 'select',
    0x13b : 'start',
    0x13c : 'mode',
    0x13d : 'thumbl',
    0x13e : 'thumbr',

    0x220 : 'dpad_up',
    0x221 : 'dpad_down',
    0x222 : 'dpad_left',
    0x223 : 'dpad_right',

    # XBox 360 controller uses these codes.
    0x2c0 : 'dpad_left',
    0x2c1 : 'dpad_right',
    0x2c2 : 'dpad_up',
    0x2c3 : 'dpad_down',
}

axis_map = []
button_map = []

# Open the joystick device.
fn = '/dev/input/js0'
print('Opening %s...' % fn)
jsdev = open(fn, 'rb')

# Get the device name.
#buf = bytearray(63)
buf = array.array('B', [0] * 64)
ioctl(jsdev, 0x80006a13 + (0x10000 * len(buf)), buf) # JSIOCGNAME(len)
js_name = buf.tobytes().rstrip(b'\x00').decode('utf-8')
print('Device name: %s' % js_name)

# Get number of axes and buttons.
buf = array.array('B', [0])
ioctl(jsdev, 0x80016a11, buf) # JSIOCGAXES
num_axes = buf[0]

buf = array.array('B', [0])
ioctl(jsdev, 0x80016a12, buf) # JSIOCGBUTTONS
num_buttons = buf[0]

# Get the axis map.
buf = array.array('B', [0] * 0x40)
ioctl(jsdev, 0x80406a32, buf) # JSIOCGAXMAP

for axis in buf[:num_axes]:
    axis_name = axis_names.get(axis, 'unknown(0x%02x)' % axis)
    axis_map.append(axis_name)
    axis_states[axis_name] = 0.0

# Get the button map.
buf = array.array('H', [0] * 200)
ioctl(jsdev, 0x80406a34, buf) # JSIOCGBTNMAP

for btn in buf[:num_buttons]:
    btn_name = button_names.get(btn, 'unknown(0x%03x)' % btn)
    button_map.append(btn_name)
    button_states[btn_name] = 0

print('%d axes found: %s' % (num_axes, ', '.join(axis_map)))
print('%d buttons found: %s' % (num_buttons, ', '.join(button_map)))
# Main event loop



delay_for_g = 1.00 #1 #0.100 # It has to be a float value. With this value 4G will be simulated -->changed the0.5 to 0.100
camera_process = None  # Initialize the camera process variable


while True:
    
    axis_percentage = 0
    servo_pulsewidth = 0
    evbuf = jsdev.read(8)

    
    # Check if delay for 4G is activated
    if delay_flag == False:
        
        if evbuf:
            time1, value, type, number = struct.unpack('IhBB', evbuf) # Get the value of the varible 'value'

            if type & 0x80:
                 # do nothing
                 pass
                 #print("(initial)", end="")
            
            # Check the state of the buttons and identify, which button was used.
            # Every button is assigned a number
            if type & 0x01:
                button = button_map[number]
                
                # Get the value of the button. If it was pressed is 1 otherwise 0
                if button:
                    button_states[button] = value
    #                 if value:
    #                     print(number)
    #                     print("%s pressed" % (button))
    #                 else:
    #                     print(number)
    #                     print("%s released" % (button))
                
                
                # Button 'B' --> 4G
                if number == 1:
                    
                    if value == 1: # Button pressed
                        
                        delay_flag = False # 4G
                        
                        if (fvalue ==1 ):
                            pass
                        
                    if value:
                        print("b pressed")
                    else:
                        print("b released")
                
                
                # Button 'X' --> 5G
                if number == 2:
                    
                    if value == 1: # Button pressed
                        
                        delay_flag = False # 5G
                        
                        if (fvalue ==1 ):
                            pass
                        
                    if value:
                        print("x pressed")
                    else:
                        print("x released")
                        
                
                # Button 'A' --> Streaming the videos
                if number == 0:
                    
                    if value == 1: # Button pres
                        if (fvalue == 1):
                            camera_process = subprocess.Popen(["python" , "video.py"])
                            pass
                        print ("button a pressed")
                        
                
                # Button 'LB' --> left/rigth drive
                if number == 4:
                    if (fvalue == 1):
                        drive_mode = 1
                        
                    if (fvalue == 0):
                        drive_mode = 1
                        
                        
                    set_servo_pulse(5,0)
                    
                    set_servo_pulse(4,0)
                    
                    
                    
            # Every axis is assigned a number            
            if type & 0x02:
                axis = axis_map[number]
                
                # Get the value of the axis and save it in fvalue. Values of fvalue lies between -1,0 and 1,0.
                if axis:
                    fvalue = value / 32767.0 # Value of the axes between -32767 and 32767.
                    axis_states[axis] = fvalue
                    print("%s: %.3f" % (axis, fvalue))
                    
                    # Left joystick: axis-y --> Boom
                    if number == 1:
                        #fvalue=fvalue*(-1)
                        print("Linker Stick Y: %.3f" % (fvalue))
                        
                        # Boom movements
                        
                        # Button 'LB' is not being held pressed anymore
                        if(drive_mode == 0):
                            
                            if (fvalue) >= 0.77:
                                calc_servo = fvalue/4.6 +1.58465

                            elif (fvalue) <= -0.2:
                                calc_servo = fvalue/5+1.58465

                            else :
                                calc_servo = 1.58465
                            
                            # Channel 0
                            set_servo_pulse(0,calc_servo) # Values of pulse between 430 and 219 (approximately). Out of 4096.
                            
                            if(fvalue < 0.2 and fvalue > -0.2):
                                
                                GPIO.output(22, GPIO.LOW)
                            else:
                                
                                GPIO.output(22, GPIO.HIGH)
                        #left drive--> LB is being pressed
                                
                        if(drive_mode == 1):
                            
                            calc_servo=fvalue*0.2+1.4
                            
                            set_servo_pulse(4,calc_servo) # Values of pulse between 392 and 181 (approximately). Out of 4096.


                    # Axis 'LT' --> Bucket
                    if number == 2:
                        print("LT: %.3f" % (fvalue))
                        axis_percentage = ((fvalue+1)/2) # With this formel we gets values between 0,0 and 1,0.
                        
                        # Bucket --> Downward movement
                        
                        # The button 'LT' was pressed
                        calc_servo=fvalue*0.1+1.6 

                        # Channel 2
                        set_servo_pulse(2,calc_servo) # Values of pulse between 327 and 433 (approximately). Out of 4096.
                        # Adjastment of the sensitivity of the bucket's reaction
                        
                        if(fvalue < 0.2):
                            GPIO.output(22, GPIO.LOW)
                        else:
                            GPIO.output(22, GPIO.HIGH)
                            
                            
                    #if number == 3:
                        #print("Rechter Stick X: %.3f" % (fvalue))

                    
                    
                    # Right joystick: axis-y --> Arm
                    if number == 4:
                        print("Rechter Stick Y: %.3f" % (fvalue))
                              
                        # Arm or right drive
                        # Button 'LB' is not being held pressed anymore
                        if (drive_mode == 0):
                              if (fvalue) >= 0.2:
                                  calc_servo = fvalue/5 +1.36
                              
                              elif (fvalue) <= -0.2:
                                  calc_servo = fvalue/5+1.36
                              
                              else :
                                  calc_servo = 1.36
                              
                              set_servo_pulse(1,calc_servo) # Values of pulse between 383 and 173 (approximately). Out of 4096.
                              
                              # Adjastment of the sensitivity of the Arm's reaction
                              if(fvalue < 0.2 and fvalue > -0.2):
                                  GPIO.output(22, GPIO.LOW)
                              else:
                                  GPIO.output(22, GPIO.HIGH)
                              # right drive
                            # Button 'LB' is being held pressed
                              
                        if(drive_mode == 1):
                        # The right joystick was pressed
                              calc_servo=(-1)*fvalue*0.52+1.4 # Values of calc_servo between 1,9 and 0,89 (approximately). Values of fvalue between -1,0 and 1,0.-->0.5145+1.4
                              
                              # The rigt drive moves <-- back or forward -->
                              # Chanel 5
                              set_servo_pulse(5,calc_servo) # Values of pulse between 392 and 181 (approximately). Out of 4096.
            
                    
                    
                    # Axis 'RT' --> Bucket
                    if number == 5:
    #                    print("RT: %.3f" % (fvalue))
                        axis_percentage = ((fvalue+1)/2)
                    
                    
                    # Bucket --> Upward movement

                    # The button 'RT' was pressed
                        calc_servo=(-1)*fvalue*0.22+1.6 # Values of calc_servo between 1,6 and 1,08 (approximately). Values of fvalue between 0,0 and 1,0-->0.5145+1.6
                        set_servo_pulse(2,calc_servo) # Values of pulse between 327 and 222 (approximately). Out of 4096.
                        
                        # Adjastment of the sensitivity of the bucket's reaction
                        if(fvalue < 0.2):
                              
                              GPIO.output(22, GPIO.LOW)
                        else:
                              GPIO.output(22, GPIO.HIGH)

    
                    #left--x
                    if number == 0:
                        fvalue=fvalue*(-1)
                              
                    # Swing --> Horizontal movement
                        if (fvalue) >= 0.2:
                              calc_servo = fvalue/5 + 1.4
                              
                        elif (fvalue) <= -0.2:
                              calc_servo = fvalue/5 + 1.4
                              
                        else:
                              calc_servo = 1.4
                              
                        set_servo_pulse(6,calc_servo) # Values of pulse between 392 and 181 (approximately). Out of 4096.
                              
                        
print("Now trying to send data...")





